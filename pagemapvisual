#!/usr/bin/env python

# pagemapvisual - tool for graphical representation of pagemap interface
# Copyright (C) 2010 Red Hat, Inc. All rights reserved.
#
#     This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Author: Petr Holasek , pholasek@redhat.com

import pygtk
pygtk.require('2.0')
import gtk
import os
import sys
import array
import time
import threading
import gobject
import argparse
import pagemapdata
import matplotlib
from pylab import *

#TODO: 
#      Speed-up pagemapdata.py module and do some refresh stuff
#            Threads on backgroud? 
#      Patch kernel => slab distortion
#      /proc/[pid]/pagemap stuff
#      Legend and canvas alongside
#      Zoom - is it usable? 

COUNT = 1
FLAGS = 2
PGMAP = 3

parser = argparse.ArgumentParser()
parser.add_argument('-c', '--count', action='store_true', help='show image of kpagecount')
parser.add_argument('-f', '--flags', action='store_true', help='show image of kpageflags')
parser.add_argument('-p', '--pagemap', action='store_true', help='show image of pagemap files')


class Painter:
    '''
    Class which invoke gtk paintings of pgmap_data class to Window
    '''

    def __init__(self,args):
        self.args = args
        try:
            self.pagemap = pagemapdata.PagemapData()
        except pagemapdata.NoPagemapError:
            sys.exit("No access to pagemap interface.Exit.")
        if args.count:
            self.p_type = COUNT
        elif args.flags:
            self.p_type = FLAGS
        elif args.pagemap:
            self.p_type = PGMAP
        else:
            self.p_type = -1


if __name__ == "__main__":
    args = parser.parse_args()
    p = Painter(args)
    p.pagemap.refresh_pids()
    p.pagemap.refresh_pgmap()

    # make a square figure and axes
    figure(1, figsize=(6,6))
    ax = axes([0.1, 0.1, 0.8, 0.8])

    fracs = []
    labels = []

    for k in sorted(p.pagemap.kpagemap.keys()):
        labels.append(k)
        fracs.append(p.pagemap.kpagemap[k][1])

    pie(fracs, labels=labels, autopct='%1.1f%%', shadow=True)
    title('PSS per pids', bbox={'facecolor':'0.8', 'pad':5})

    show()

    

    
    

